{"version":3,"sources":["components/triggers/DialogTrigger.tsx","components/common/SingleChoice/SingleChoiceItem.tsx","components/common/SingleChoice/SingleChoiceList.tsx","components/common/SingleChoice/index.tsx","components/listItems/ReportListItem.tsx","../node_modules/@material-ui/icons/ArrowDropDown.js","components/Comments/Answers/Answers.tsx","components/Comments/Answers/index.tsx","components/Comments/Comment/CommentPopoverButton.tsx","components/Comments/Comment/Comment.tsx","components/Comments/Comment/index.tsx","components/Comments/Comments.tsx"],"names":["useStyles","makeStyles","theme","createStyles","content","padding","actions","borderTop","palette","divider","DialogTrigger","title","maxWidth","renderTrigger","renderActions","classes","useState","open","setOpen","handleToggle","closeButton","edge","onClick","dialogAppBar","endAction","dialogContent","className","dialogActions","dialog","onClose","button","SingleChoiceItem","label","variant","value","checked","icon","Radio","size","style","opacity","checkedIcon","ListItem","dense","ListItemIcon","ListItemText","primary","SingleChoiceList","onLoad","fromModelToProps","initialValue","onChange","setValue","List","Items","renderLoadMore","renderItem","model","item","ReportListItem","SingleChoice","a","async","reason","MenuListItem","Button","color","_interopRequireDefault","require","Object","defineProperty","exports","default","_react","_default","createElement","d","toolbar","spacing","minHeight","collapse","paddingLeft","Answers","body","React","Toolbar","startIcon","Collapse","in","unmountOnExit","Comments","generateComments","CommentPopoverButton","PopoverButton","renderContent","display","alignItems","marginRight","textDecoration","verificationIcon","marginLeft","avatar_variant_mini","width","height","Comment","avatarSrc","avatarTo","titleTo","text","createdAt","initialLikes","initialDislikes","initialChecked","edited","verified","avatar","Avatar","clsx","component","Link","to","src","Tooltip","fontSize","titleNode","Typography","createdAtNode","formatDistance","Date","listItem","disableGutters","ListItemAvatar","secondary","ListItemSecondaryAction","LikeDislikeButton","LikeButtonProps","DislikeButtonProps","id","avatarUrl","userName","likes","dislikes","liked","otherProps","channelPageTo","CHANNEL_PAGE_ROUTE","replace","key"],"mappings":"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","file":"static/js/12.f56ac436.chunk.js","sourcesContent":["import React, {ReactElement, ReactNode, useState} from \"react\";\r\nimport {createStyles, Dialog, DialogProps, Theme} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport PopoverAppBar, {PopoverAppBarProps} from \"../PopoverAppBar\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nexport interface DialogTriggerProps {\r\n    content: DialogProps['children'];\r\n    renderTrigger: (onClick: VoidFunction) => ReactElement;\r\n    renderActions?: (onClose: VoidFunction) => ReactNode;\r\n    title?: PopoverAppBarProps['title'];\r\n    maxWidth?: DialogProps['maxWidth'];\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    content: {\r\n        padding: 0\r\n    },\r\n    actions: {\r\n        borderTop: `1px solid ${theme.palette.divider}`\r\n    }\r\n}));\r\n\r\nfunction DialogTrigger({\r\n    title,\r\n    maxWidth,\r\n    renderTrigger,\r\n    content,\r\n    renderActions\r\n}: DialogTriggerProps) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const handleToggle = () => setOpen(!open);\r\n\r\n    const closeButton = (\r\n        <IconButton\r\n            edge=\"end\"\r\n            onClick={handleToggle}\r\n        >\r\n            <CloseIcon />\r\n        </IconButton>\r\n    );\r\n\r\n    const dialogAppBar = title ? (\r\n        <PopoverAppBar\r\n            title={title}\r\n            endAction={closeButton}\r\n        />\r\n    ) : null;\r\n\r\n    const dialogContent = (\r\n        <DialogContent className={classes.content}>\r\n            {content}\r\n        </DialogContent>\r\n    );\r\n\r\n    const dialogActions = renderActions ? (\r\n        <DialogActions className={classes.actions}>\r\n            {renderActions(() => setOpen(false))}\r\n        </DialogActions>\r\n    ) : null;\r\n\r\n    const dialog = (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleToggle}\r\n            maxWidth={maxWidth}\r\n        >\r\n            {dialogAppBar}\r\n            {dialogContent}\r\n            {dialogActions}\r\n        </Dialog>\r\n    );\r\n\r\n    const button = renderTrigger(handleToggle);\r\n\r\n    return (\r\n        <>\r\n            {button}\r\n            {dialog}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogTrigger;\r\n","import ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport React from \"react\";\r\nimport {Radio} from \"@material-ui/core\";\r\n\r\nexport interface SingleChoiceItemBaseProps {\r\n    label: string;\r\n    value: string;\r\n}\r\n\r\nexport interface SingleChoiceItemProps extends SingleChoiceItemBaseProps {\r\n    variant?: 'check' | 'radio';\r\n    checked?: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nfunction SingleChoiceItem({\r\n    label,\r\n    value,\r\n    variant ,\r\n    checked,\r\n    onClick\r\n}: SingleChoiceItemProps) {\r\n    const icon = variant === 'check' ? (\r\n        <Radio\r\n            size=\"small\"\r\n            checked={checked}\r\n            icon={<CheckIcon style={{opacity: 0}} />}\r\n            checkedIcon={<CheckIcon />}\r\n        />\r\n    ) : (\r\n        <Radio\r\n            checked={checked}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <ListItem\r\n            dense\r\n            button\r\n            onClick={onClick}\r\n        >\r\n            <ListItemIcon>\r\n                {icon}\r\n            </ListItemIcon>\r\n            <ListItemText\r\n                primary={label}\r\n            />\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default SingleChoiceItem;\r\n","import React, {useState} from \"react\";\r\nimport {List} from \"@material-ui/core\";\r\nimport Items, {ItemsProps} from \"../Items\";\r\nimport SingleChoiceItem, {SingleChoiceItemBaseProps, SingleChoiceItemProps} from \"./SingleChoiceItem\";\r\n\r\nexport interface SingleChoiceListProps<T = any> {\r\n    onLoad: ItemsProps['onLoad'];\r\n    fromModelToProps: (model: any) => SingleChoiceItemBaseProps;\r\n    variant?: SingleChoiceItemProps['variant'];\r\n    initialValue?: SingleChoiceItemProps['value'];\r\n    onChange?: (item: SingleChoiceItemBaseProps) => void;\r\n}\r\n\r\nfunction SingleChoiceList({\r\n    variant,\r\n    onLoad,\r\n    fromModelToProps,\r\n    initialValue = '',\r\n    onChange\r\n}: SingleChoiceListProps) {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    const renderItem = (model: any) => {\r\n        const item = fromModelToProps(model);\r\n        return (\r\n            <SingleChoiceItem\r\n                {...item}\r\n                variant={variant}\r\n                checked={value === item.value}\r\n                onClick={() => {\r\n                    setValue(item.value);\r\n                    if (onChange) onChange(item);\r\n                }}\r\n            />\r\n        )\r\n    };\r\n\r\n    return (\r\n        <List>\r\n            <Items\r\n                renderLoadMore={null}\r\n                renderItem={renderItem}\r\n                onLoad={onLoad}\r\n            />\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default SingleChoiceList;\r\n","import SingleChoiceList from \"./SingleChoiceList\";\r\n\r\nexport default SingleChoiceList;\r\n","import React from \"react\";\r\nimport MenuListItem from \"../common/MenuListItem\";\r\nimport FlagIcon from \"@material-ui/icons/Flag\";\r\nimport DialogTrigger, {DialogTriggerProps} from \"../triggers/DialogTrigger\";\r\nimport SingleChoiceList from \"../common/SingleChoice\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nfunction ReportListItem() {\r\n    const title = 'Report';\r\n    const renderTrigger: DialogTriggerProps['renderTrigger'] = (onClick) => (\r\n        <MenuListItem\r\n            title={title}\r\n            icon={<FlagIcon />}\r\n            onClick={onClick}\r\n        />\r\n    );\r\n\r\n    const content = (\r\n        <SingleChoiceList\r\n            onLoad={async () => [\r\n                'Sexual content',\r\n                'Violent or repulsive content',\r\n                'Hateful or abusive content',\r\n                'Harmful or dangerous acts',\r\n                'Spam or misleading'\r\n            ]}\r\n            fromModelToProps={(reason: string) => ({\r\n                label: reason,\r\n                value: reason\r\n            })}\r\n        />\r\n    );\r\n\r\n    const renderActions: DialogTriggerProps['renderActions'] = onClose => (\r\n        <>\r\n            <Button onClick={onClose}>\r\n                Cancel\r\n            </Button>\r\n            <Button\r\n                color=\"secondary\"\r\n                onClick={onClose}\r\n            >\r\n                Report\r\n            </Button>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <DialogTrigger\r\n            title={title}\r\n            content={content}\r\n            renderTrigger={renderTrigger}\r\n            renderActions={renderActions}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ReportListItem;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M7 10l5 5 5-5z\"\n}), 'ArrowDropDown');\n\nexports.default = _default;","import React, {ReactNode} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {createStyles, Theme} from \"@material-ui/core\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\n\r\nexport interface AnswersProps {\r\n    body: ReactNode;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    toolbar: {\r\n        padding: theme.spacing(0, 0, 0, 7),\r\n        minHeight: 'initial'\r\n    },\r\n    collapse: {\r\n        paddingLeft: theme.spacing(7)\r\n    }\r\n}));\r\n\r\nfunction Answers({\r\n    body\r\n}: AnswersProps) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const toggle = () => setOpen(!open);\r\n\r\n    const toolbar = (\r\n        <Toolbar className={classes.toolbar}>\r\n            <Button\r\n                size=\"small\"\r\n                color=\"secondary\"\r\n                startIcon={<ArrowDropDownIcon />}\r\n                onClick={toggle}\r\n            >\r\n                {open ? 'Hide' : 'View'} replies\r\n            </Button>\r\n        </Toolbar>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {toolbar}\r\n            <Collapse\r\n                className={classes.collapse}\r\n                in={open}\r\n                unmountOnExit\r\n            >\r\n                {body}\r\n            </Collapse>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Answers;\r\n","import React from \"react\";\r\nimport Component from \"./Answers\";\r\nimport Comments from \"../index\";\r\nimport {generateComments} from \"../../../services/commentsService\";\r\n\r\nfunction Answers() {\r\n   return (\r\n       <Component\r\n           body={\r\n               <Comments\r\n                   onLoad={generateComments}\r\n                   variant=\"mini\"\r\n               />\r\n           }\r\n       />\r\n   )\r\n}\r\n\r\nexport default Answers;\r\n","import React from \"react\";\r\nimport PopoverButton from \"../../buttons/PopoverButton\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ReportListItem from \"../../listItems/ReportListItem\";\r\n\r\nfunction CommentPopoverButton() {\r\n    const renderContent = () => (\r\n        <List>\r\n            <ReportListItem/>\r\n        </List>\r\n    );\r\n\r\n    return (\r\n        <PopoverButton\r\n            edge=\"end\"\r\n            renderContent={renderContent}\r\n        />\r\n    )\r\n}\r\n\r\nexport default CommentPopoverButton;\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {AvatarProps, createStyles, Theme} from \"@material-ui/core\";\r\nimport LikeDislikeButton, {LikeDislikeButtonProps} from \"../../buttons/LikeDislikeButton\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React, {ReactNode} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport {formatDistance} from \"date-fns\";\r\nimport CommentPopoverButton from \"./CommentPopoverButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\n\r\nexport interface CommentBaseProps {\r\n    variant?: 'mini' | 'normal';\r\n}\r\n\r\nexport interface CommentProps extends CommentBaseProps {\r\n    avatarSrc: AvatarProps['src'];\r\n    avatarTo?: string;\r\n    title: ReactNode;\r\n    titleTo?: string;\r\n    text: ReactNode;\r\n    createdAt: Date;\r\n    initialLikes: LikeDislikeButtonProps['initialLikes'];\r\n    initialDislikes: LikeDislikeButtonProps['initialDislikes'];\r\n    initialChecked: LikeDislikeButtonProps['initialChecked'];\r\n    edited?: boolean;\r\n    verified?: boolean;\r\n}\r\n\r\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\r\n    toolbar: {\r\n        padding: theme.spacing(0, 0, 0, 7),\r\n        minHeight: 'auto'\r\n    },\r\n    title: {\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n        marginRight: theme.spacing(1),\r\n        textDecoration: 'none',\r\n    },\r\n    verificationIcon: {\r\n        marginLeft: theme.spacing(.5)\r\n    },\r\n    avatar_variant_mini: {\r\n        width: 32,\r\n        height: 32\r\n    }\r\n}));\r\n\r\nfunction Comment({\r\n    variant = 'normal',\r\n    avatarSrc,\r\n    avatarTo = '',\r\n    title,\r\n    titleTo = '',\r\n    text,\r\n    createdAt,\r\n    initialLikes,\r\n    initialDislikes,\r\n    initialChecked,\r\n    edited = false,\r\n    verified= false,\r\n\r\n}: CommentProps) {\r\n    const classes = useStyles();\r\n\r\n    const avatar = (\r\n        <Avatar\r\n            className={clsx({\r\n                [classes.avatar_variant_mini]: variant === 'mini'\r\n            })}\r\n            component={Link}\r\n            to={avatarTo}\r\n            src={avatarSrc}\r\n        />\r\n    );\r\n\r\n    const verificationIcon = verified ? (\r\n        <Tooltip\r\n            title=\"Verified\"\r\n        >\r\n            <CheckCircleIcon\r\n                className={classes.verificationIcon}\r\n                fontSize=\"inherit\"\r\n            />\r\n        </Tooltip>\r\n    ) : null;\r\n\r\n    const titleNode = (\r\n        <Typography\r\n            className={classes.title}\r\n            variant=\"inherit\"\r\n            color=\"textPrimary\"\r\n            component={Link}\r\n            to={titleTo}\r\n        >\r\n            {title}\r\n            {verificationIcon}\r\n        </Typography>\r\n    );\r\n\r\n    const createdAtNode = (\r\n        <Typography\r\n            variant=\"body2\"\r\n            color=\"textSecondary\"\r\n            component=\"span\"\r\n        >\r\n            {formatDistance(new Date(), createdAt)}\r\n            {edited ? ' (edited)' : null}\r\n        </Typography>\r\n    );\r\n\r\n    const listItem = (\r\n        <ListItem\r\n            disableGutters\r\n            alignItems=\"flex-start\"\r\n        >\r\n            <ListItemAvatar>\r\n                {avatar}\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={\r\n                    <>\r\n                        {titleNode}\r\n                        {createdAtNode}\r\n                    </>\r\n                }\r\n                secondary={text}\r\n            />\r\n            <ListItemSecondaryAction>\r\n                <CommentPopoverButton />\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    );\r\n\r\n    const toolbar = (\r\n        <Toolbar className={classes.toolbar}>\r\n            <LikeDislikeButton\r\n                initialLikes={initialLikes}\r\n                initialDislikes={initialDislikes}\r\n                initialChecked={initialChecked}\r\n                LikeButtonProps={{\r\n                    size: 'small'\r\n                }}\r\n                DislikeButtonProps={{\r\n                    size: 'small'\r\n                }}\r\n            />\r\n            <Button\r\n                variant=\"text\"\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n            >\r\n                Reply\r\n            </Button>\r\n        </Toolbar>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            {listItem}\r\n            {toolbar}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\nimport Component, {CommentBaseProps} from \"./Comment\";\r\nimport {CommentModel} from \"../../../models/CommentModel\";\r\nimport {CHANNEL_PAGE_ROUTE} from \"../../../pages/ChannelPage\";\r\n\r\nexport interface CommentProps extends CommentBaseProps, CommentModel {}\r\n\r\nfunction Comment({\r\n    id,\r\n    avatarUrl,\r\n    userName,\r\n    text,\r\n    createdAt,\r\n    likes,\r\n    dislikes,\r\n    liked,\r\n    verified,\r\n    edited,\r\n    ...otherProps\r\n}: CommentProps) {\r\n    const channelPageTo = CHANNEL_PAGE_ROUTE.replace(':id', id);\r\n    return (\r\n        <Component\r\n            {...otherProps}\r\n            avatarSrc={avatarUrl}\r\n            avatarTo={channelPageTo}\r\n            title={userName}\r\n            titleTo={channelPageTo}\r\n            text={text}\r\n            createdAt={createdAt}\r\n            initialLikes={likes}\r\n            initialDislikes={dislikes}\r\n            initialChecked={liked ? 'like' : (liked === false) ? 'dislike' : 'none'}\r\n            edited={edited}\r\n            verified={verified}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\nimport {List} from \"@material-ui/core\";\r\nimport Comment, {CommentProps} from \"./Comment\";\r\nimport Items, {ItemsProps} from \"../common/Items\";\r\nimport Answers from \"./Answers\";\r\n\r\nexport interface CommentsProps {\r\n    onLoad: ItemsProps<CommentProps>['onLoad'];\r\n    variant?: CommentProps['variant'];\r\n}\r\n\r\nfunction Comments({\r\n    onLoad,\r\n    variant = 'normal'\r\n}: CommentsProps) {\r\n    const renderItem = (item: CommentProps) => (\r\n        <div key={item.id}>\r\n            <Comment\r\n                variant={variant}\r\n                {...item}\r\n            />\r\n            <Answers />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <List>\r\n            <Items\r\n                renderItem={renderItem}\r\n                onLoad={onLoad}\r\n            />\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default Comments;\r\n"],"sourceRoot":""}