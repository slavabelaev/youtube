{"version":3,"sources":["services/videosService.ts","components/Videos/index.tsx","pages/SearchPage/SearchPage.tsx"],"names":["generateGridVideos","a","async","Array","fill","map","item","index","id","title","faker","lorem","sentence","replace","duration","Math","round","random","videoUrl","previewUrl","channelAvatarUrl","image","avatar","channelName","company","companyName","channelUrl","views","verified","createdAt","date","past","generateListVideos","isNew","isRecommended","Component","React","lazy","Videos","props","fallback","useStyles","makeStyles","theme","createStyles","root","maxWidth","breakpoints","width","padding","spacing","margin","SearchPage","classes","className","onLoad"],"mappings":"iNAGaA,EAAqB,oBAAAC,EAAAC,OAAA,yEAAmCC,MAAM,IACtEC,KAAK,MACLC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CACnBC,GAAG,GAAD,OAAKD,GACPE,MAAOC,IAAMC,MAAMC,WAAWC,QAAQ,IAAK,IAC3CC,SAAUC,KAAKC,MAAsB,KAAhBD,KAAKE,UAC1BC,SAAS,YAAD,OAAcX,GACtBY,WAAY,sBACZC,iBAAkBV,IAAMW,MAAMC,SAC9BC,YAAab,IAAMc,QAAQC,cAC3BC,WAAW,YAAD,OAAcnB,GACxBoB,MAAOZ,KAAKC,MAAsB,UAAhBD,KAAKE,UACvBW,SAAUb,KAAKE,SAAW,GAC1BY,UAAWnB,IAAMoB,KAAKC,YAbI,sCAgBrBC,EAAqB,oBAAA/B,EAAAC,OAAA,yEAAmCC,MAAM,IACtEC,KAAK,MACLC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CACnBC,GAAG,GAAD,OAAKD,GACPE,MAAOC,IAAMC,MAAMC,WAAWC,QAAQ,IAAK,IAC3CC,SAAUC,KAAKC,MAAsB,KAAhBD,KAAKE,UAC1BC,SAAS,YAAD,OAAcX,GACtBY,WAAY,sBACZI,YAAab,IAAMc,QAAQC,cAC3BC,WAAW,YAAD,OAAcnB,GACxB0B,MAAO1B,EAAQ,IAAM,EACrB2B,cAAe3B,EAAQ,IAAM,EAC7BoB,MAAOZ,KAAKC,MAAsB,UAAhBD,KAAKE,UACvBW,SAAUb,KAAKE,SAAW,GAC1BY,UAAWnB,IAAMoB,KAAKC,YAdI,uC,iCCnBlC,4BAIMI,EAAYC,IAAMC,MAAK,kBAAM,+DAUpBC,IARf,SAAgBC,GACZ,OACI,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAChB,kBAACL,EAAcI,M,iCCT3B,8DAKME,EAAYC,aAAW,SAACC,GAAD,OAAkBC,YAAa,CACxDC,KAAM,CACFC,SAAUH,EAAMI,YAAYC,MAAM,MAClCC,QAASN,EAAMO,QAAQ,GACvBC,OAAQ,aAgBDC,UAZf,WACI,IAAMC,EAAUZ,IAEhB,OACI,0BAAMa,UAAWD,EAAQR,MACrB,kBAAC,IAAD,CACIU,OAAQvB","file":"static/js/19.344082c6.chunk.js","sourcesContent":["import faker from \"faker/locale/en\";\r\nimport {VideoModel} from \"../models/VideoModel\";\r\n\r\nexport const generateGridVideos = async (): Promise<VideoModel[]> => Array(12)\r\n    .fill(null)\r\n    .map((item, index) => ({\r\n        id: `${index}`,\r\n        title: faker.lorem.sentence().replace('.', ''),\r\n        duration: Math.round(Math.random() * 36000000),\r\n        videoUrl: `/watch?v=${index}`,\r\n        previewUrl: 'https://invalid_url',\r\n        channelAvatarUrl: faker.image.avatar(),\r\n        channelName: faker.company.companyName(),\r\n        channelUrl: `/channel/${index}`,\r\n        views: Math.round(Math.random() * 999999999),\r\n        verified: Math.random() > 0.5,\r\n        createdAt: faker.date.past()\r\n    }));\r\n\r\nexport const generateListVideos = async (): Promise<VideoModel[]> => Array(12)\r\n    .fill(null)\r\n    .map((item, index) => ({\r\n        id: `${index}`,\r\n        title: faker.lorem.sentence().replace('.', ''),\r\n        duration: Math.round(Math.random() * 36000000),\r\n        videoUrl: `/watch?v=${index}`,\r\n        previewUrl: 'https://invalid_url',\r\n        channelName: faker.company.companyName(),\r\n        channelUrl: `/channel/${index}`,\r\n        isNew: index % 2 === 0,\r\n        isRecommended: index % 2 === 1,\r\n        views: Math.round(Math.random() * 999999999),\r\n        verified: Math.random() > 0.5,\r\n        createdAt: faker.date.past()\r\n    }));\r\n","import React, { Suspense } from \"react\";\r\nimport {VideosProps} from \"./Videos\";\r\nimport SuspenseFallback from \"../common/SuspenseFallback\";\r\n\r\nconst Component = React.lazy(() => import('./Videos'));\r\n\r\nfunction Videos(props: VideosProps) {\r\n    return (\r\n        <Suspense fallback={<SuspenseFallback />}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nexport default Videos;\r\n","import React from \"react\";\r\nimport {makeStyles, createStyles, Theme} from \"@material-ui/core\";\r\nimport Videos from \"../../components/Videos\";\r\nimport {generateListVideos} from \"../../services/videosService\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        maxWidth: theme.breakpoints.width('md'),\r\n        padding: theme.spacing(2),\r\n        margin: 'auto'\r\n    }\r\n}));\r\n\r\nfunction SearchPage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main className={classes.root}>\r\n            <Videos\r\n                onLoad={generateListVideos}\r\n            />\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default SearchPage;\r\n"],"sourceRoot":""}